#!/bin/bash
#
# Short:    Utility Script - Deploy payloads from cached group policies
# Author:   Mark J Swift
# Version:  3.2.2
# Modified: 02-Jan-2021
#
# Called as follows:
#   deploypayloads
#

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# ---

GLB_SV_CODEVERSION="3.2.2"

# ---

# Include the Core Defs library (if it is not already loaded)
if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
then
  . "${GLB_SV_PROJECTDIRPATH}"/inc-sh/CoreDefs.sh

  # Exit if something went wrong unexpectedly
  if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
  then
    echo >&2 "Something unexpected happened"
    exit 90
  fi
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'inc/Common.sh' for a complete list.

# ---

# Used to distinguish mobileconfigs managed by LabWarden (Legacy)
sv_lwmanaged=".lwm"

# Used to distinguish mobileconfigs managed by LabNotes
sv_ManagedTag=".${GLB_SC_PROJECTNAME}"

# ---

# Here we start for real

# ---

if [ -e "/usr/local/LabWarden/util/gpupdate" ]
then
  GLB_NF_QUICKEXIT "'${GLB_SV_THISSCRIPTFILENAME}' aborted. An old version of LabWarden is installed that includes incompatible code."
fi

if [ -e "/usr/local/LabWarden/bin/gpupdate" ]
then
  GLB_NF_QUICKEXIT "'${GLB_SV_THISSCRIPTFILENAME}' aborted. An old version of LabWarden is installed that includes incompatible code."
fi

# ---

# Grab  lock
if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
then
  GLB_NF_QUICKEXIT "'${GLB_SV_THISSCRIPTFILENAME}' aborted. Another instance is already running ."
fi

# ---

if [ "${GLB_SV_RUNUSERNAME}" = "root" ]
then
  sv_GPOuser=${1}
  if [ -n "${sv_GPOuser}" ]
  then
    sv_PolicyContext="Users/${sv_GPOuser}"
  else
    sv_PolicyContext="Computers/localhost"
  fi

  # make sure the managed prefs directory exists
  if ! test -e "/Library/Managed Preferences"
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Creating folder '/Library/Managed Preferences'"
    mkdir -p "/Library/Managed Preferences"
    chmod 755 "/Library/Managed Preferences"
  fi

else
  sv_GPOuser=""
  sv_PolicyContext="Users/${GLB_SV_RUNUSERNAME}"
 
fi

# ---

# can be run as root or user

# Set the CWD to somewhere anyone can access
cd /tmp

if test -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyContext}"
then

  if test -e "/Library/Managed Preferences"
  then
  
  iv_CruxEpoch=$(stat -f "%m" "/Library/Managed Preferences")
  iv_ObjectEpoch=$(stat -f "%m" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyContext}")
  if [ ${iv_CruxEpoch} -lt ${iv_ObjectEpoch} ]
  then
    iv_CruxEpoch=${iv_ObjectEpoch}
  fi

  iv_LastDeployEpoch=$(GLB_NF_NAMEDFLAGMEPOCH "${GLB_SV_THISSCRIPTFILENAME}")
  if [ ${iv_LastDeployEpoch} -lt ${iv_CruxEpoch} ]
  then
    GLB_NF_NAMEDFLAGCREATE "${GLB_SV_THISSCRIPTFILENAME}" "${iv_CruxEpoch}"

    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Applying note payloads to '${sv_PolicyContext}'"

    ls -1 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyContext}" | sed 's|^[^\.]*\.||' | tr [A-Z] [a-z] | sort -u | while read sv_PayloadFileExt
    do

        sv_ListHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers/${sv_PayloadFileExt}-list
        if ! test -e "${sv_ListHandlerFilePath}"
        then
          sv_ListHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers-custom/${sv_PayloadFileExt}-list
          if ! test -e "${sv_ListHandlerFilePath}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There's no 'list' handler for payloads of type '${sv_PayloadFileExt}'"
            continue
          fi
        fi
    
        sv_GetIdHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers/${sv_PayloadFileExt}-getid
        if ! test -e "${sv_GetIdHandlerFilePath}"
        then
          sv_GetIdHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers-custom/${sv_PayloadFileExt}-getid
          if ! test -e "${sv_GetIdHandlerFilePath}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There's no 'getid' handler for payloads of type '${sv_PayloadFileExt}'"
            continue
          fi
        fi
    
        sv_SetIdHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers/${sv_PayloadFileExt}-setid
        if ! test -e "${sv_SetIdHandlerFilePath}"
        then
          sv_SetIdHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers-custom/${sv_PayloadFileExt}-setid
          if ! test -e "${sv_SetIdHandlerFilePath}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There's no 'setid' handler for payloads of type '${sv_PayloadFileExt}'"
            continue
          fi
        fi
    
        sv_InstallHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers/${sv_PayloadFileExt}-install
        if ! test -e "${sv_InstallHandlerFilePath}"
        then
          sv_InstallHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers-custom/${sv_PayloadFileExt}-install
          if ! test -e "${sv_InstallHandlerFilePath}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There's no 'install' handler for payloads of type '${sv_PayloadFileExt}'"
            continue
          fi
        fi
    
        sv_UninstallHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers/${sv_PayloadFileExt}-uninstall
        if ! test -e "${sv_UninstallHandlerFilePath}"
        then
          sv_UninstallHandlerFilePath="${GLB_SV_PROJECTDIRPATH}"/GPOHandlers-custom/${sv_PayloadFileExt}-uninstall
          if ! test -e "${sv_UninstallHandlerFilePath}"
          then
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "There's no 'uninstall' handler for payloads of type '${sv_PayloadFileExt}'"
            continue
          fi
        fi
    
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Processing payloads of type '${sv_PayloadFileExt}'"
    
        # Prep install list
        touch "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-install.txt"
    
        # Prep uninstall list
        "${sv_ListHandlerFilePath}" "${sv_GPOuser}" | grep -E "${sv_ManagedTag}$|${sv_lwmanaged}$" | sort -u > "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-uninstall.txt"

        # Build install list, and cut-down uninstall list
        ls -1 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyContext}" | grep -i "\.${sv_PayloadFileExt}$" | sort -u | while read sv_PayloadFileName
        do
          sv_PayloadFilePath="${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyContext}/${sv_PayloadFileName}"
      
          # get the vanilla id by stripping off the managed id tag
          sv_PayloadIdentifier=$("${sv_GetIdHandlerFilePath}" "${sv_PayloadFilePath}" | sed "s|${sv_lwmanaged}$||"| sed "s|${sv_ManagedTag}$||")
          
          # add to uninstall list if already installed (but not managed)
          "${sv_ListHandlerFilePath}" "${sv_GPOuser}" | grep "^${sv_PayloadIdentifier}$" >> "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-uninstall.txt"
          
          # add the managed id tag
          sv_PayloadIdentifier="${sv_PayloadIdentifier}${sv_ManagedTag}"
          
          # add to install list if not already installed
          if test -z "$("${sv_ListHandlerFilePath}" "${sv_GPOuser}" | grep -E "^${sv_PayloadIdentifier}$")"
          then
            echo ${sv_PayloadFilePath} >> "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-install.txt"
          fi
          
          # always remove from uninstall list
          cp "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-uninstall.txt" "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-temp.txt"
          cat "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-temp.txt" | grep -Ev "^${sv_PayloadIdentifier}$" | sort -u > "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-uninstall.txt"
        done

        # Do the uninstalls
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Uninstalling payloads of type '${sv_PayloadFileExt}'"
        cat  "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-uninstall.txt" | while read sv_PayloadIdentifier
        do
          iv_Count=0
          while [ ${iv_Count} -lt 3 ]
          do
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Uninstalling '${sv_PayloadFileExt}' '${sv_PayloadIdentifier}'"
            "${sv_UninstallHandlerFilePath}" "${sv_PayloadIdentifier}" "${sv_GPOuser}"
            
            iv_Err=$?
            if [ "${iv_Err}" -eq 0 ]
            then
              break
            fi
        
            GLB_NF_LOGMESSAGE ${MSGLEVELERR} "Error '${iv_Err}' uninstalling '${sv_PayloadFileExt}' '${sv_PayloadIdentifier}'"
            iv_Count=$((${iv_Count}+1))
          done
        done

        # Do the installs
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Installing payloads of type '${sv_PayloadFileExt}'"
        cat  "${GLB_SV_THISSCRIPTTEMPDIRPATH}/Policies-install.txt" | while read sv_PayloadFilePath
        do
          # get the vanilla id by stripping off the managed id tag
          sv_PayloadIdentifier=$("${sv_GetIdHandlerFilePath}" "${sv_PayloadFilePath}" | sed "s|${sv_lwmanaged}$||"| sed "s|${sv_ManagedTag}$||")
          
          # add the managed id tag
          sv_PayloadIdentifier="${sv_PayloadIdentifier}${sv_ManagedTag}"

          # We are going to modify the mobileconfig, so make our copy first
          cp -f "${sv_PayloadFilePath}" "${GLB_SV_THISSCRIPTTEMPDIRPATH}/temp.mobileconfig"
          sv_PayloadFilePath="${GLB_SV_THISSCRIPTTEMPDIRPATH}/temp.mobileconfig"

          # update the id to signify a managed install
          "${sv_SetIdHandlerFilePath}" "${sv_PayloadFilePath}" "${sv_PayloadIdentifier}"

          iv_Count=0
          while [ ${iv_Count} -lt 3 ]
          do
            GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Installing '${sv_PayloadFileExt}' '${sv_PayloadIdentifier}'"
            "${sv_InstallHandlerFilePath}" "${sv_PayloadFilePath}" "${sv_GPOuser}"
            
            iv_Err=$?
            if [ "${iv_Err}" -eq 0 ]
            then
              break
            fi
        
            GLB_NF_LOGMESSAGE ${MSGLEVELERR} "Error '${iv_Err}' installing '${sv_PayloadFileExt}' '${sv_PayloadIdentifier}'"
            iv_Count=$((${iv_Count}+1))
          done
        done
    
    done
  fi
  
  fi
  
fi

# ---

# Release lock
GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"

# ---

# Remove temporary files
rm -fR "${GLB_SV_THISSCRIPTTEMPDIRPATH}"

exit 0
