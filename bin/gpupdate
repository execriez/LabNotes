#!/bin/bash
#
# Short:    Utility Script - Perform a Group Policy update
# Author:   Mark J Swift
# Version:  3.2.0
# Modified: 24-Oct-2020
#
# Called as follows:
#   gpupdate [-force|-quick] [<user>]
#
# Without a user specified, updates the group policies for the workstation.
# With a user, updates the group policies for the specified user.

# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# ---

GLB_SV_CODEVERSION="3.2.0"

# ---

# Include the Core Defs library (if it is not already loaded)
if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
then
  . "${GLB_SV_PROJECTDIRPATH}"/inc-sh/CoreDefs.sh

  # Exit if something went wrong unexpectedly
  if [ -z "${GLB_BC_CORE_ISINCLUDED}" ]
  then
    echo >&2 "Something unexpected happened"
    exit 90
  fi
fi

# By the time we get here, quite a few global variables have been set up.
# Look at 'inc/Common.sh' for a complete list.

# ---

if [ "${GLB_SV_RUNUSERNAME}" != "root" ]
then
  GLB_NF_QUICKEXIT "Aborting - must be run as root"
fi

# --- check if we are getting our payloads from AD

if [ -z "${GLB_SV_ADDNSDOMAINNAME}" ]
then
  GLB_NF_QUICKEXIT "Aborting - this workstation may not be bound to an AD domain"
fi

# ---

sv_GPoption="$(echo ${1} | tr [A-Z] [a-z])"

case "${sv_GPoption}" in
-force|-quick|-default)
  sv_GPOuser=${2}
  ;;

*)
  sv_GPoption="-default"
  sv_GPOuser=${1}
  ;;
    
esac

# ---

# Create the base directories

  if [ ! -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO" ]
  then
  
    # Force gpupdate
    sv_GPoption="-force"
    
    # ---

    # Create base folders
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/Computers"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/Users"

    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/Computers"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/Users"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/Computers"
    mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/Users"

    # ---

    # Set access rights
    chmod 755 "${GLB_SC_PROJECTSETTINGSDIRPATH}"
    chown root:wheel "${GLB_SC_PROJECTSETTINGSDIRPATH}"

    # Set access rights
    chown -R root:wheel "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO"
    chmod -R 755 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO"
    
    # ---

  fi

# ---

case "${sv_GPoption}" in
-force)
  # Update if policy doesn't exist or is older than this (1 minute)
  iv_GPCacheMaxAgeMinutes=${GLB_IV_GPFORCEUPDATEMINMINUTES}
  ;;

-quick)
  # Update if policy doesn't exist or is older than this (180 days)
  iv_GPCacheMaxAgeMinutes=${GLB_IV_GPQUICKUPDATEMINMINUTES}
  ;;
    
*)
  # Update if policy doesn't exist or is older than this (6 hours old)
  iv_GPCacheMaxAgeMinutes=${GLB_IV_GPUPDATEMINMINUTES}
  ;;
    
esac

# ---

  if test -z "${sv_GPOuser}"
  then
    # If we are root and we didn't supply a user, Update/apply user policies (as root) for all users who are logged in
    who -q | grep -Ev "^#" | tr " " "\n" | sort -u | grep -Ev "^$" | grep -Ev "^root$" | while read sv_GPOuser
    do
      "${0}" "${sv_GPoption}" "${sv_GPOuser}"
    done
    
    sv_GPOuser=""
  fi

# ---

sf_BuildGroupMembershipCache() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local sv_ObjectContext
  local sv_ObjectName
  local sv_NameDelim
  local sv_GroupName
  local sv_SubGroupName
  local iv_CacheEpoch
  local sv_Temp1FilePath
  local sv_Attr
  local sv_Value
  local iv_Err

  sv_ObjectContext=${1}
  sv_ObjectName=${2}
  
  case "${sv_ObjectContext}" in
  Computers)
    sv_NameDelim="$"
    ;;

  Users|Groups)
    sv_NameDelim=""
    ;;
    
  *)
    exit 0
    ;;
    
  esac
  
  iv_CacheEpoch=0
  if test -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
  then
    iv_CacheEpoch=$(stat -f "%m" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt")
  fi
  
  if [ $((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_CacheEpoch})) -lt $((${iv_GPCacheMaxAgeMinutes}*60)) ]
  then
    cat "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"

  else
    sv_Temp0FilePath=$(mktemp "${GLB_SV_THISSCRIPTTEMPDIRPATH}/XXXXXXXX")
    
    # Get the memberOf field from AD 
    sv_Value=$(GLB_SF_GETDIRECTORYOBJECTATTRVALUE "/Search/${sv_ObjectContext}" "${sv_ObjectName}${sv_NameDelim}" "memberOf")
    echo "${sv_Value}" > "${sv_Temp0FilePath}"
    if [ "${sv_Value}" = "ERROR" ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Cannot get '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' 'memberOf' field from AD."
      if test -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} " using cached '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' 'memberOf' field."
        cat "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      fi
      
    else
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Just read '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' 'memberOf' field from AD."
    
      sv_Temp1FilePath=$(mktemp "${GLB_SV_THISSCRIPTTEMPDIRPATH}/XXXXXXXX")
      touch "${sv_Temp1FilePath}"

      cat "${sv_Temp0FilePath}" | sed "s| CN=|:|g" | tr ":" "\n" | sed "s|CN=||g" | cut -d"," -f1 | sort -u | while read sv_GroupName
      do
        if [ -n "${sv_GroupName}" ]
        then
          echo "${sv_GroupName}"
          echo "${sv_GroupName}">>"${sv_Temp1FilePath}"
          sf_BuildGroupMembershipCache "Groups" "${sv_GroupName}" | while read sv_SubGroupName
          do
            if [ "${sv_SubGroupName}" = "${sv_ObjectName}" ]
            then
              break
          
            else
              echo "${sv_SubGroupName}"
              echo "${sv_SubGroupName}">>"${sv_Temp1FilePath}"
          
            fi
          done
        fi
      done
      rm -f "${sv_Temp0FilePath}"
    
      sv_Temp2FilePath=$(mktemp "${GLB_SV_THISSCRIPTTEMPDIRPATH}/XXXXXXXX")
      chmod 644 "${sv_Temp2FilePath}"
    
      cat "${sv_Temp1FilePath}" | sort -u >"${sv_Temp2FilePath}"
      rm -f "${sv_Temp1FilePath}"

      mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}"
      chmod 755 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}"
    
      ln -fh "${sv_Temp2FilePath}" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      rm -f "${sv_Temp2FilePath}"
      
      if [ "${sv_ObjectContext}" = "Groups" ]
      then
        # Get the Info (Notes) field from AD 
        sv_Value=$(GLB_SF_GETDIRECTORYOBJECTATTRVALUE "/Search/${sv_ObjectContext}" "${sv_ObjectName}${sv_NameDelim}" "info")
        echo "${sv_Value}" > "${sv_Temp1FilePath}"
        if [ "${sv_Value}" = "ERROR" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Cannot get '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' 'info' (Notes) field from AD (maybe it hasn't connected yet)."
          
        else
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Just read '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' 'info' (Notes) field from AD."
          
          # Keep the file if the Info field is not empty
          if test -s "${sv_Temp1FilePath}"
          then
            touch -t $(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} "+%Y%m%d%H%M.%S") "${sv_Temp1FilePath}"
            chmod 644 "${sv_Temp1FilePath}"
            mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/${sv_ObjectContext}"
            chmod 755 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/${sv_ObjectContext}"
            mv -f "${sv_Temp1FilePath}" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/${sv_ObjectContext}/${sv_ObjectName}.txt"
          fi
        fi
        rm -f "${sv_Temp1FilePath}"
        
      fi

    fi

  fi
  
}

sf_ListGroups() # <Context> <ObjectName> - List object membership. Context can be Users, Computers or Groups.
{
  local sv_ObjectContext
  local sv_ObjectName

  sv_ObjectContext=${1}
  sv_ObjectName=${2}

  sf_BuildGroupMembershipCache "${sv_ObjectContext}" "${sv_ObjectName}" | sort -u
  
}

# ---

# Here we start for real

# ---

# Grab  lock
if [ $(GLB_BF_NAMEDLOCKGRAB "${GLB_SV_THISSCRIPTFILENAME}") = ${GLB_BC_FALSE} ]
then
  GLB_NF_QUICKEXIT "'${GLB_SV_THISSCRIPTFILENAME}' aborted. Another instance is already running ."
fi

if test -z "${sv_GPOuser}"
then
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "${GLB_SV_THISSCRIPTFILENAME} ${sv_GPoption}"
  
else
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "${GLB_SV_THISSCRIPTFILENAME} ${sv_GPoption} '${sv_GPOuser}'"
  
fi

# ---

if test -n "${sv_GPOuser}"
then
  sv_ObjectContext="Users"
  sv_ObjectName="${sv_GPOuser}"

else
  sv_ObjectContext="Computers"
  sv_ObjectName="${GLB_SV_HOSTNAME}"
  
fi

case "${sv_ObjectContext}" in
Computers)
  sv_NameDelim="$"
  sv_PolicyFolder="${sv_ObjectContext}/localhost"
  ;;

Users|Groups)
  sv_NameDelim=""
  sv_PolicyFolder="${sv_ObjectContext}/${sv_ObjectName}"
  ;;
    
*)
  exit 0
  ;;
    
esac
 
  # --- check if we should update payloads from AD

      bv_UpdatePoliciesFromAD=${GLB_BC_FALSE}
    
      iv_ObjectEpoch=0
      if test -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt"
      then
        iv_ObjectEpoch=$(stat -f "%m" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/MemberOf/${sv_ObjectContext}/${sv_ObjectName}.txt")
      fi
  
      if [ $((${GLB_IV_THISSCRIPTSTARTEPOCH}-${iv_ObjectEpoch})) -gt $((${iv_GPCacheMaxAgeMinutes}*60)) ]
      then
        # The cache has aged out - so lets look to see if we can update the object from AD
        if test -z "${GLB_SV_IPV4PRIMARYSERVICEUUID}"
        then
          # we need a network
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Not updating payloads from AD - no network"
      
        else
          sv_Value=$(GLB_SF_GETDIRECTORYOBJECTATTRVALUE "/Search/${sv_ObjectContext}" "${sv_ObjectName}${sv_NameDelim}" "name")
          if [ "${sv_Value}" = "ERROR" ]
          then
            if [ "${GLB_SV_ADDNSDOMAINNAME}" != "${GLB_SV_IPV4PRIMARYSERVICEDHCPOPTION15}" ]
            then
              # we need to be on the domains network
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Not updating payloads from AD - not on the ${GLB_SV_ADFLATDOMAINNAME} network"
              
            else
              GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELNOTICE} "Not updating payloads from AD - cannot read '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' directory info"
              
            fi
        
          else
            bv_UpdatePoliciesFromAD=${GLB_BC_TRUE}

          fi
        fi
      fi
        
      if [ "${bv_UpdatePoliciesFromAD}" = ${GLB_BC_TRUE} ]
      then
        # --- Lets try to update the payloads from AD
      
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Retrieving note payloads from AD for '${sv_ObjectName}' in '${sv_ObjectContext}'"

        sv_Value=$(GLB_SF_GETDIRECTORYOBJECTATTRVALUE "/Search/${sv_ObjectContext}" "${sv_ObjectName}${sv_NameDelim}" "name")
        if [ "${sv_Value}" = "ERROR" ]
        then
          # the object needs to exist in AD
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELWARN} "Cannot find '${sv_ObjectContext}' '${sv_ObjectName}${sv_NameDelim}' in AD. Might be too soon after restart."
                    
        else
          # Fill a directory with the objects info payload(s)
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Filling a directory with the objects info payload(s)"
          
          sv_UpdatedInfoPayloadDirPath=$(mktemp -d "${GLB_SV_THISSCRIPTTEMPDIRPATH}/XXXXXXXX")

          sf_ListGroups "${sv_ObjectContext}" "${sv_ObjectName}" | while read sv_ObjectGroup
          do
            if test -e "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/Groups/${sv_ObjectGroup}.txt"
            then
              ln -fh "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Cache/Notes/Groups/${sv_ObjectGroup}.txt" "${sv_UpdatedInfoPayloadDirPath}/${sv_ObjectGroup}.txt"
            fi
          done

          # Join split info payloads into a single file - if the joined file already exists, it will be overwritten
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Joining split info payloads into a new file"
          cd "${sv_UpdatedInfoPayloadDirPath}"
          ls -1 "${sv_UpdatedInfoPayloadDirPath}" | grep -E "\-[0-9]{1}.txt$" | sed -E "s|(.*)(-[0-9]{1}.txt$)|\1|" | sort -u | while read sv_GroupName
          do
            # If the joined file doesn't exist, create a new file from the split parts
#            if ! test -e "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
#            then
              cat $(ls -1 "${sv_UpdatedInfoPayloadDirPath}" | grep -E "${sv_GroupName}-[0-9]{1}.txt$" | sort) > "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
              touch -t $(date -r ${GLB_IV_THISSCRIPTSTARTEPOCH} "+%Y%m%d%H%M.%S") "${sv_UpdatedInfoPayloadDirPath}/${sv_GroupName}.txt"
#            fi
          done

          # Delete split payloads
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Deleting remaining split payloads"
          find "${sv_UpdatedInfoPayloadDirPath}" -iregex '.*\-[0-9]\{1\}.txt$' -exec rm -f "{}" \;

          # Unpack the info payload content
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELDEBUG} "Unpacking the info payload content"
          sv_UpdatedPayloadContentDirPath=$(mktemp -d "${GLB_SV_THISSCRIPTTEMPDIRPATH}/XXXXXXXX")

          cd "${sv_UpdatedPayloadContentDirPath}"
          ls -1 "${sv_UpdatedInfoPayloadDirPath}" | while read sv_InfoPayloadName
          do
            cat "${sv_UpdatedInfoPayloadDirPath}/${sv_InfoPayloadName}" | base64 2>/dev/null -D | tar 2>/dev/null -xvzf -
          done
          chown -R root:wheel "${sv_UpdatedPayloadContentDirPath}"
          cd /tmp
          
          # ---

          mkdir -p "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyFolder}"
          rm -fR "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyFolder}"
          mv "${sv_UpdatedPayloadContentDirPath}" "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyFolder}"
          chmod 755 "${GLB_SC_PROJECTSETTINGSDIRPATH}/GPO/Policies/${sv_PolicyFolder}"

          # ---

        fi      
      
      fi
    
# if we supplied the force option, deploy the payloads too,
# rather than waiting for the deploypayloads LaunchAgent/LaunchDeamon to kick in
if [ "${sv_GPoption}" = "-force" ]
then
  "${GLB_SV_THISSCRIPTDIRPATH}/deploypayloads" "${sv_GPOuser}"
fi

# ---

# Release lock
GLB_NF_NAMEDLOCKRELEASE "${GLB_SV_THISSCRIPTFILENAME}"

# ---

# Remove temporary files
rm -fR "${GLB_SV_THISSCRIPTTEMPDIRPATH}"

exit 0
